package com.uxb2b.ecp.web.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.uxb2b.ecp.bean.FlowMaintainBean;
import com.uxb2b.ecp.bean.RejectReasonMaintainBean;
import com.uxb2b.ecp.bean.UserProfileBean;
import com.uxb2b.ecp.business.IFlowMaintainBusiness;
import com.uxb2b.ecp.business.IRejectReasonMaintainBusiness;
import com.uxb2b.ecp.business.IUserLogBusiness;
import com.uxb2b.ecp.model.Flow;
import com.uxb2b.ecp.model.Function;
import com.uxb2b.ecp.model.RejectReason;
import com.uxb2b.ecp.model.Role;
import com.uxb2b.ecp.model.SysCode;
import com.uxb2b.ecp.model.UserLog;
import com.uxb2b.ecp.persist.ISysCodeRepositoryPersist;
import com.uxb2b.ecp.repository.FlowRepository;
import com.uxb2b.ecp.repository.RoleRepository;
import com.uxb2b.ecp.service.SystemInfo;
import com.uxb2b.ecp.web.controller.query.QueryUserAccessRecordController;


/**
 * 退回原因維護
 * @author evayang
 *
 */
@Controller
@RequestMapping(value = "/rejectReasonMaintain")
public class RejectReasonMaintainController {
	
	private Logger log = LoggerFactory.getLogger(RejectReasonMaintainController.class);
	
	@Autowired
	SystemInfo systemInfo;
	
	@Autowired
	IRejectReasonMaintainBusiness iRejectReasonMaintainBusiness;
	
	@Autowired
	IUserLogBusiness iUserLogBusiness;
	
	@Autowired
	ISysCodeRepositoryPersist iSysCodeRepositoryPersist;
	
	/**
	 * 退回原因維護清冊 - 查詢列表
	 * @param pageNumber
	 * @param pageSize
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping
    public String main(RejectReasonMaintainBean searchBean, @RequestParam(value = "page", defaultValue = "1") int pageNumber,
			  @RequestParam(value = "page.size", defaultValue = SystemInfo.PAGE_SIZE) int pageSize, Model model) throws Exception {
		
		Page<RejectReasonMaintainBean> resultList = iRejectReasonMaintainBusiness.queryRejectReasonList(pageNumber, pageSize);
		model.addAttribute("resultList", resultList);
		model.addAttribute("searchBean", searchBean);
		return "rejectReason/queryRejectReason";
		
	}

	
	/**
	 * 退回原因維護清冊 - 新增導頁
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/doAdd")
	public String doAdd(RejectReasonMaintainBean searchBean, Model model) {
		List<SysCode> sysCodeList = iSysCodeRepositoryPersist.findByIdCodeType("REJECT");
		searchBean.setAction("add");
		searchBean.setCodeType("A1");
		searchBean.setStatus(Short.parseShort("1"));
		model.addAttribute("searchBean", searchBean);
		model.addAttribute("sysCodeList", sysCodeList);
		return "rejectReason/editRejectReason";
	}
	
	/**
	 * 退回原因維護清冊 - 修改導頁
	 * @param codeType 代碼類別 
	 * @param codeKey 代碼key 
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/doModify")
	public String doModify(String codeType, String codeKey, Model model) throws Exception {
		RejectReasonMaintainBean searchBean = iRejectReasonMaintainBusiness.findByIdCodeTypeNoAndIdCodeKey(codeType, codeKey);
		searchBean.setAction("edit");
		model.addAttribute("searchBean", searchBean);		
		return "rejectReason/editRejectReason";
	}
	
	/**
	 * 退回原因維護清冊 - 新增/修改
	 * @param searchBean
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/doSave")
	public String doSave(RejectReasonMaintainBean searchBean,Model model) {
		
		UserProfileBean userDetails = systemInfo.getUserProfileBean();
		String userId = userDetails.getUsername();
		String userName = userDetails.getViewUserName();
		String logContent = "";
		try{
			iRejectReasonMaintainBusiness.save(searchBean);
			if("add".equals(searchBean.getAction())){
				logContent = "退回原因["+searchBean.getCodeValue() + "]新增成功！";
				iUserLogBusiness.SuccessLog(userId, userName, SystemInfo.USER_LOG_FUNCTION_ID_REJECT_REASON_MAINTAIN, SystemInfo.USER_LOG_ACTION_ADD, logContent);
				model.addAttribute("functionName", "新增退回原因");
			}else{
				logContent = "退回原因["+searchBean.getCodeValue() + "]修改成功！";
				iUserLogBusiness.SuccessLog(userId, userName, SystemInfo.USER_LOG_FUNCTION_ID_REJECT_REASON_MAINTAIN, SystemInfo.USER_LOG_ACTION_MODIFY, logContent);
				model.addAttribute("functionName", "修改退回原因");
			}
			model.addAttribute("message", logContent);
		}catch(Exception e){
			if("add".equals(searchBean.getAction())){
				log.error("退回原因新增失敗 :"+e);
				e.printStackTrace();
				logContent="退回原因["+searchBean.getCodeValue() + "]新增失敗";
				iUserLogBusiness.ErrorLog(userId, userName, SystemInfo.USER_LOG_FUNCTION_ID_REJECT_REASON_MAINTAIN, SystemInfo.USER_LOG_ACTION_ADD, logContent);
				model.addAttribute("functionName", "新增退回原因");
			}else{
				log.error("退回原因修改失敗 :"+e);
				e.printStackTrace();
				logContent="簽核流程["+searchBean.getCodeValue() + "]修改失敗";
				iUserLogBusiness.ErrorLog(userId, userName, SystemInfo.USER_LOG_FUNCTION_ID_REJECT_REASON_MAINTAIN, SystemInfo.USER_LOG_ACTION_MODIFY, logContent);
				model.addAttribute("functionName", "修改退回原因");
			}
			model.addAttribute("message", logContent);
		}
		return "common/message";
	}
}
