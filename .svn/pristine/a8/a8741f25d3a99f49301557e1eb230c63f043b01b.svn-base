package com.uxb2b.ecp.web.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.uxb2b.ecp.bean.FlowMaintainBean;
import com.uxb2b.ecp.bean.UserProfileBean;
import com.uxb2b.ecp.business.IFlowMaintainBusiness;
import com.uxb2b.ecp.business.IUserLogBusiness;
import com.uxb2b.ecp.model.Flow;
import com.uxb2b.ecp.model.Function;
import com.uxb2b.ecp.model.Role;
import com.uxb2b.ecp.model.UserLog;
import com.uxb2b.ecp.repository.FlowRepository;
import com.uxb2b.ecp.repository.RoleRepository;
import com.uxb2b.ecp.service.SystemInfo;
import com.uxb2b.ecp.web.controller.query.QueryUserAccessRecordController;


/**
 * 簽核流程維護
 * @author evayang
 *
 */
@Controller
@RequestMapping(value = "/flowMaintain")
public class FlowMaintainController {
	
	private Logger log = LoggerFactory.getLogger(FlowMaintainController.class);
	
	@Autowired
	SystemInfo systemInfo;
	
	@Autowired
	IFlowMaintainBusiness iFlowMaintainBusiness;
	
	@Autowired
	RoleRepository roleRepository;
	
	@Autowired
	FlowRepository flowRepository;
	
	@Autowired
	IUserLogBusiness iUserLogBusiness;
	
	/**
	 * 簽核流程維護清冊 - 查詢列表
	 * @param searchBean
	 * @param pageNumber
	 * @param pageSize
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping
    public String main(FlowMaintainBean searchBean,@RequestParam(value = "page", defaultValue = "1") int pageNumber,
			  @RequestParam(value = "page.size", defaultValue = SystemInfo.PAGE_SIZE) int pageSize, Model model) throws Exception {
		
		List<Function> flowFunctionList = iFlowMaintainBusiness.findFunctionList();
		Page<Flow> resultList = iFlowMaintainBusiness.queryFlowList(searchBean, pageNumber, pageSize);
		List<FlowMaintainBean> flowList = iFlowMaintainBusiness.queryFlowList(searchBean);
		
		model.addAttribute("resultList", resultList);
		model.addAttribute("flowList", flowList);
		model.addAttribute("doAdd", flowFunctionList.size() > 0 ? true : false);
		
		return "flow/queryFlow";
	}

	
	/**
	 * 簽核流程維護清冊 - 新增導頁
	 * @param searchBean
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/newFlow")
	public String newFlow(FlowMaintainBean searchBean,Model model) {
		
		List<Function> flowFunctionList = iFlowMaintainBusiness.findFunctionList();
		String step = systemInfo.getApprove().get("maxlevel");
		List<Role> roleList= roleRepository.findAll();
		searchBean.setAction("add");
		
		model.addAttribute("flowFunctionList", flowFunctionList);
		model.addAttribute("step", step);
		model.addAttribute("roleList", roleList);
		model.addAttribute("searchBean", searchBean);
		
		return "flow/addNewFlow";
	}
	
	/**
	 * 簽核流程維護清冊 - 修改導頁
	 * @param searchBean
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/doModify")
	public String editFlow(FlowMaintainBean searchBean,Model model) throws Exception {
		
		List<Function> flowFunctionList = iFlowMaintainBusiness.findFunctionListForModify(searchBean.getFlowId());
		String step = systemInfo.getApprove().get("maxlevel");
		List<Role> roleList= roleRepository.findAll();
		
		searchBean = iFlowMaintainBusiness.findbyFlowId(searchBean);
		searchBean.setAction("edit");
		
		model.addAttribute("flowFunctionList", flowFunctionList);
		model.addAttribute("step", step);
		model.addAttribute("roleList", roleList);
		model.addAttribute("searchBean", searchBean);
		
		return "flow/addNewFlow";
	}
	
	/**
	 * 簽核流程維護清冊 - 新增/修改
	 * @param searchBean
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/doAdd")
	public String newFlowSubmit(FlowMaintainBean searchBean,Model model) {
		
		UserProfileBean userDetails = systemInfo.getUserProfileBean();
		String userId = userDetails.getUsername();
		String userName = userDetails.getViewUserName();
		String logContent = "";
		try{
			iFlowMaintainBusiness.save(searchBean);
			if("add".equals(searchBean.getAction())){
				logContent = "簽核流程[" + searchBean.getFlowId()+":"+searchBean.getFlowName() + "]新增成功！";
				iUserLogBusiness.SuccessLog(userId, userName, SystemInfo.USER_LOG_FUNCTION_ID_FLOW_MAINTAIN, SystemInfo.USER_LOG_ACTION_ADD, logContent);
				model.addAttribute("functionName", "新增流程");
			}else{
				logContent = "簽核流程[" + searchBean.getFlowId()+":"+searchBean.getFlowName() + "]修改成功！";
				iUserLogBusiness.SuccessLog(userId, userName, SystemInfo.USER_LOG_FUNCTION_ID_FLOW_MAINTAIN, SystemInfo.USER_LOG_ACTION_MODIFY, logContent);
				model.addAttribute("functionName", "修改流程");
			}
			model.addAttribute("message", logContent);
		}catch(Exception e){
			if("add".equals(searchBean.getAction())){
				log.error("簽核流程新增失敗 :"+e);
				e.printStackTrace();
				logContent="簽核流程["+ searchBean.getFlowId()+":"+searchBean.getFlowName() + "]新增失敗";
				iUserLogBusiness.ErrorLog(userId, userName, SystemInfo.USER_LOG_FUNCTION_ID_FLOW_MAINTAIN, SystemInfo.USER_LOG_ACTION_ADD, logContent);
				model.addAttribute("functionName", "新增流程");
			}else{
				log.error("簽核流程修改失敗 :"+e);
				e.printStackTrace();
				logContent="簽核流程["+ searchBean.getFlowId()+":"+searchBean.getFlowName() + "]修改失敗";
				iUserLogBusiness.ErrorLog(userId, userName, SystemInfo.USER_LOG_FUNCTION_ID_FLOW_MAINTAIN, SystemInfo.USER_LOG_ACTION_MODIFY, logContent);
				model.addAttribute("functionName", "新增流程");
			}
			model.addAttribute("message", logContent);
		}
		return "common/message";
	}
	
	/**
	 * 簽核流程維護清冊 - 刪除
	 * @param searchBean
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/delFlow")
	public String delFlow(FlowMaintainBean searchBean,Model model) {
		
		UserProfileBean userDetails = systemInfo.getUserProfileBean();
		String userId = userDetails.getUsername();
		String userName = userDetails.getViewUserName();
		try{
			iFlowMaintainBusiness.del(searchBean);
			String logContent = "簽核流程[" + searchBean.getFlowId()+":"+searchBean.getFlowName() + "]刪除成功！";
			iUserLogBusiness.SuccessLog(userId, userName, SystemInfo.USER_LOG_FUNCTION_ID_FLOW_MAINTAIN, SystemInfo.USER_LOG_ACTION_DELETE, logContent);
			model.addAttribute("functionName", "刪除流程");
			model.addAttribute("message", logContent);
		}catch(Exception e){
			log.error("簽核流程刪除失敗 :"+e);
			e.printStackTrace();
			String logContent="簽核流程["+ searchBean.getFlowId()+":"+searchBean.getFlowName() + "]刪除失敗";
			iUserLogBusiness.ErrorLog(userId, userName, SystemInfo.USER_LOG_FUNCTION_ID_FLOW_MAINTAIN, SystemInfo.USER_LOG_ACTION_DELETE, logContent);
			model.addAttribute("functionName", "刪除流程");
			model.addAttribute("message", logContent);
		}
		return "common/message";
	}
}
